/* 
 * currencyapi
 *
 * The currency APIs help you retrieve exchange rates and convert prices between currencies easily.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Cloudmersive.APIClient.NET.Currency.Client;
using Cloudmersive.APIClient.NET.Currency.Api;
using Cloudmersive.APIClient.NET.Currency.Model;

namespace Cloudmersive.APIClient.NET.Currency.Test
{
    /// <summary>
    ///  Class for testing CurrencyExchangeApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CurrencyExchangeApiTests
    {
        private CurrencyExchangeApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CurrencyExchangeApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CurrencyExchangeApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CurrencyExchangeApi
            //Assert.IsInstanceOfType(typeof(CurrencyExchangeApi), instance, "instance is a CurrencyExchangeApi");
        }

        
        /// <summary>
        /// Test CurrencyExchangeConvertCurrency
        /// </summary>
        [Test]
        public void CurrencyExchangeConvertCurrencyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string source = null;
            //string destination = null;
            //double? sourcePrice = null;
            //var response = instance.CurrencyExchangeConvertCurrency(source, destination, sourcePrice);
            //Assert.IsInstanceOf<ConvertedCurrencyResult> (response, "response is ConvertedCurrencyResult");
        }
        
        /// <summary>
        /// Test CurrencyExchangeGetAvailableCurrencies
        /// </summary>
        [Test]
        public void CurrencyExchangeGetAvailableCurrenciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CurrencyExchangeGetAvailableCurrencies();
            //Assert.IsInstanceOf<AvailableCurrencyResponse> (response, "response is AvailableCurrencyResponse");
        }
        
        /// <summary>
        /// Test CurrencyExchangeGetExchangeRate
        /// </summary>
        [Test]
        public void CurrencyExchangeGetExchangeRateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string source = null;
            //string destination = null;
            //var response = instance.CurrencyExchangeGetExchangeRate(source, destination);
            //Assert.IsInstanceOf<ExchangeRateResult> (response, "response is ExchangeRateResult");
        }
        
    }

}
