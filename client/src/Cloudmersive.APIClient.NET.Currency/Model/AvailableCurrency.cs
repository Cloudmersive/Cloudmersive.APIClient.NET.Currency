/* 
 * currencyapi
 *
 * The currency APIs help you retrieve exchange rates and convert prices between currencies easily.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.Currency.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.Currency.Model
{
    /// <summary>
    /// Details of a specific currency
    /// </summary>
    [DataContract]
    public partial class AvailableCurrency :  IEquatable<AvailableCurrency>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AvailableCurrency" /> class.
        /// </summary>
        /// <param name="iSOCurrencyCode">ISO 4217 currency three-letter code associated with the country.</param>
        /// <param name="currencySymbol">Symbol associated with the currency.</param>
        /// <param name="currencyEnglishName">Full name of the currency.</param>
        /// <param name="countryName">Name of the country.</param>
        /// <param name="countryThreeLetterCode">Three-letter ISO 3166-1 country code.</param>
        /// <param name="countryISOTwoLetterCode">Two-letter ISO 3166-1 country code.</param>
        /// <param name="isEuropeanUnionMember">True if this country is currently a member of the European Union (EU), false otherwise.</param>
        public AvailableCurrency(string iSOCurrencyCode = default(string), string currencySymbol = default(string), string currencyEnglishName = default(string), string countryName = default(string), string countryThreeLetterCode = default(string), string countryISOTwoLetterCode = default(string), bool? isEuropeanUnionMember = default(bool?))
        {
            this.ISOCurrencyCode = iSOCurrencyCode;
            this.CurrencySymbol = currencySymbol;
            this.CurrencyEnglishName = currencyEnglishName;
            this.CountryName = countryName;
            this.CountryThreeLetterCode = countryThreeLetterCode;
            this.CountryISOTwoLetterCode = countryISOTwoLetterCode;
            this.IsEuropeanUnionMember = isEuropeanUnionMember;
        }
        
        /// <summary>
        /// ISO 4217 currency three-letter code associated with the country
        /// </summary>
        /// <value>ISO 4217 currency three-letter code associated with the country</value>
        [DataMember(Name="ISOCurrencyCode", EmitDefaultValue=false)]
        public string ISOCurrencyCode { get; set; }

        /// <summary>
        /// Symbol associated with the currency
        /// </summary>
        /// <value>Symbol associated with the currency</value>
        [DataMember(Name="CurrencySymbol", EmitDefaultValue=false)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Full name of the currency
        /// </summary>
        /// <value>Full name of the currency</value>
        [DataMember(Name="CurrencyEnglishName", EmitDefaultValue=false)]
        public string CurrencyEnglishName { get; set; }

        /// <summary>
        /// Name of the country
        /// </summary>
        /// <value>Name of the country</value>
        [DataMember(Name="CountryName", EmitDefaultValue=false)]
        public string CountryName { get; set; }

        /// <summary>
        /// Three-letter ISO 3166-1 country code
        /// </summary>
        /// <value>Three-letter ISO 3166-1 country code</value>
        [DataMember(Name="CountryThreeLetterCode", EmitDefaultValue=false)]
        public string CountryThreeLetterCode { get; set; }

        /// <summary>
        /// Two-letter ISO 3166-1 country code
        /// </summary>
        /// <value>Two-letter ISO 3166-1 country code</value>
        [DataMember(Name="CountryISOTwoLetterCode", EmitDefaultValue=false)]
        public string CountryISOTwoLetterCode { get; set; }

        /// <summary>
        /// True if this country is currently a member of the European Union (EU), false otherwise
        /// </summary>
        /// <value>True if this country is currently a member of the European Union (EU), false otherwise</value>
        [DataMember(Name="IsEuropeanUnionMember", EmitDefaultValue=false)]
        public bool? IsEuropeanUnionMember { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AvailableCurrency {\n");
            sb.Append("  ISOCurrencyCode: ").Append(ISOCurrencyCode).Append("\n");
            sb.Append("  CurrencySymbol: ").Append(CurrencySymbol).Append("\n");
            sb.Append("  CurrencyEnglishName: ").Append(CurrencyEnglishName).Append("\n");
            sb.Append("  CountryName: ").Append(CountryName).Append("\n");
            sb.Append("  CountryThreeLetterCode: ").Append(CountryThreeLetterCode).Append("\n");
            sb.Append("  CountryISOTwoLetterCode: ").Append(CountryISOTwoLetterCode).Append("\n");
            sb.Append("  IsEuropeanUnionMember: ").Append(IsEuropeanUnionMember).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AvailableCurrency);
        }

        /// <summary>
        /// Returns true if AvailableCurrency instances are equal
        /// </summary>
        /// <param name="input">Instance of AvailableCurrency to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AvailableCurrency input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ISOCurrencyCode == input.ISOCurrencyCode ||
                    (this.ISOCurrencyCode != null &&
                    this.ISOCurrencyCode.Equals(input.ISOCurrencyCode))
                ) && 
                (
                    this.CurrencySymbol == input.CurrencySymbol ||
                    (this.CurrencySymbol != null &&
                    this.CurrencySymbol.Equals(input.CurrencySymbol))
                ) && 
                (
                    this.CurrencyEnglishName == input.CurrencyEnglishName ||
                    (this.CurrencyEnglishName != null &&
                    this.CurrencyEnglishName.Equals(input.CurrencyEnglishName))
                ) && 
                (
                    this.CountryName == input.CountryName ||
                    (this.CountryName != null &&
                    this.CountryName.Equals(input.CountryName))
                ) && 
                (
                    this.CountryThreeLetterCode == input.CountryThreeLetterCode ||
                    (this.CountryThreeLetterCode != null &&
                    this.CountryThreeLetterCode.Equals(input.CountryThreeLetterCode))
                ) && 
                (
                    this.CountryISOTwoLetterCode == input.CountryISOTwoLetterCode ||
                    (this.CountryISOTwoLetterCode != null &&
                    this.CountryISOTwoLetterCode.Equals(input.CountryISOTwoLetterCode))
                ) && 
                (
                    this.IsEuropeanUnionMember == input.IsEuropeanUnionMember ||
                    (this.IsEuropeanUnionMember != null &&
                    this.IsEuropeanUnionMember.Equals(input.IsEuropeanUnionMember))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ISOCurrencyCode != null)
                    hashCode = hashCode * 59 + this.ISOCurrencyCode.GetHashCode();
                if (this.CurrencySymbol != null)
                    hashCode = hashCode * 59 + this.CurrencySymbol.GetHashCode();
                if (this.CurrencyEnglishName != null)
                    hashCode = hashCode * 59 + this.CurrencyEnglishName.GetHashCode();
                if (this.CountryName != null)
                    hashCode = hashCode * 59 + this.CountryName.GetHashCode();
                if (this.CountryThreeLetterCode != null)
                    hashCode = hashCode * 59 + this.CountryThreeLetterCode.GetHashCode();
                if (this.CountryISOTwoLetterCode != null)
                    hashCode = hashCode * 59 + this.CountryISOTwoLetterCode.GetHashCode();
                if (this.IsEuropeanUnionMember != null)
                    hashCode = hashCode * 59 + this.IsEuropeanUnionMember.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
