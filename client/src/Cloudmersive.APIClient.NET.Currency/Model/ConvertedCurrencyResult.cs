/* 
 * currencyapi
 *
 * The currency APIs help you retrieve exchange rates and convert prices between currencies easily.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.Currency.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.Currency.Model
{
    /// <summary>
    /// Result of performing a Convert Currency operation
    /// </summary>
    [DataContract]
    public partial class ConvertedCurrencyResult :  IEquatable<ConvertedCurrencyResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConvertedCurrencyResult" /> class.
        /// </summary>
        /// <param name="convertedPrice">The converted price in the destination currency.</param>
        /// <param name="iSOCurrencyCode">ISO 4217 currency three-letter code of destination price.</param>
        /// <param name="currencySymbol">Destination currency symbol.</param>
        /// <param name="formattedPriceAsString">Formatted price in the destination currency as a string.</param>
        public ConvertedCurrencyResult(double? convertedPrice = default(double?), string iSOCurrencyCode = default(string), string currencySymbol = default(string), string formattedPriceAsString = default(string))
        {
            this.ConvertedPrice = convertedPrice;
            this.ISOCurrencyCode = iSOCurrencyCode;
            this.CurrencySymbol = currencySymbol;
            this.FormattedPriceAsString = formattedPriceAsString;
        }
        
        /// <summary>
        /// The converted price in the destination currency
        /// </summary>
        /// <value>The converted price in the destination currency</value>
        [DataMember(Name="ConvertedPrice", EmitDefaultValue=false)]
        public double? ConvertedPrice { get; set; }

        /// <summary>
        /// ISO 4217 currency three-letter code of destination price
        /// </summary>
        /// <value>ISO 4217 currency three-letter code of destination price</value>
        [DataMember(Name="ISOCurrencyCode", EmitDefaultValue=false)]
        public string ISOCurrencyCode { get; set; }

        /// <summary>
        /// Destination currency symbol
        /// </summary>
        /// <value>Destination currency symbol</value>
        [DataMember(Name="CurrencySymbol", EmitDefaultValue=false)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Formatted price in the destination currency as a string
        /// </summary>
        /// <value>Formatted price in the destination currency as a string</value>
        [DataMember(Name="FormattedPriceAsString", EmitDefaultValue=false)]
        public string FormattedPriceAsString { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConvertedCurrencyResult {\n");
            sb.Append("  ConvertedPrice: ").Append(ConvertedPrice).Append("\n");
            sb.Append("  ISOCurrencyCode: ").Append(ISOCurrencyCode).Append("\n");
            sb.Append("  CurrencySymbol: ").Append(CurrencySymbol).Append("\n");
            sb.Append("  FormattedPriceAsString: ").Append(FormattedPriceAsString).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConvertedCurrencyResult);
        }

        /// <summary>
        /// Returns true if ConvertedCurrencyResult instances are equal
        /// </summary>
        /// <param name="input">Instance of ConvertedCurrencyResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConvertedCurrencyResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConvertedPrice == input.ConvertedPrice ||
                    (this.ConvertedPrice != null &&
                    this.ConvertedPrice.Equals(input.ConvertedPrice))
                ) && 
                (
                    this.ISOCurrencyCode == input.ISOCurrencyCode ||
                    (this.ISOCurrencyCode != null &&
                    this.ISOCurrencyCode.Equals(input.ISOCurrencyCode))
                ) && 
                (
                    this.CurrencySymbol == input.CurrencySymbol ||
                    (this.CurrencySymbol != null &&
                    this.CurrencySymbol.Equals(input.CurrencySymbol))
                ) && 
                (
                    this.FormattedPriceAsString == input.FormattedPriceAsString ||
                    (this.FormattedPriceAsString != null &&
                    this.FormattedPriceAsString.Equals(input.FormattedPriceAsString))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConvertedPrice != null)
                    hashCode = hashCode * 59 + this.ConvertedPrice.GetHashCode();
                if (this.ISOCurrencyCode != null)
                    hashCode = hashCode * 59 + this.ISOCurrencyCode.GetHashCode();
                if (this.CurrencySymbol != null)
                    hashCode = hashCode * 59 + this.CurrencySymbol.GetHashCode();
                if (this.FormattedPriceAsString != null)
                    hashCode = hashCode * 59 + this.FormattedPriceAsString.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
