/* 
 * currencyapi
 *
 * The currency APIs help you retrieve exchange rates and convert prices between currencies easily.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Cloudmersive.APIClient.NET.Currency.Client;
using Cloudmersive.APIClient.NET.Currency.Model;

namespace Cloudmersive.APIClient.NET.Currency.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICurrencyExchangeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Converts a price from the source currency into the destination currency
        /// </summary>
        /// <remarks>
        /// Automatically converts the price in the source currency into the destination currency using the latest available currency exchange rate data.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Currency.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <param name="destination">Destination currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <param name="sourcePrice">Input price, such as 19.99 in source currency</param>
        /// <returns>ConvertedCurrencyResult</returns>
        ConvertedCurrencyResult CurrencyExchangeConvertCurrency (string source, string destination, double? sourcePrice);

        /// <summary>
        /// Converts a price from the source currency into the destination currency
        /// </summary>
        /// <remarks>
        /// Automatically converts the price in the source currency into the destination currency using the latest available currency exchange rate data.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Currency.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <param name="destination">Destination currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <param name="sourcePrice">Input price, such as 19.99 in source currency</param>
        /// <returns>ApiResponse of ConvertedCurrencyResult</returns>
        ApiResponse<ConvertedCurrencyResult> CurrencyExchangeConvertCurrencyWithHttpInfo (string source, string destination, double? sourcePrice);
        /// <summary>
        /// Get a list of available currencies and corresponding countries
        /// </summary>
        /// <remarks>
        /// Enumerates available currencies and the countries that correspond to these currencies.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Currency.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AvailableCurrencyResponse</returns>
        AvailableCurrencyResponse CurrencyExchangeGetAvailableCurrencies ();

        /// <summary>
        /// Get a list of available currencies and corresponding countries
        /// </summary>
        /// <remarks>
        /// Enumerates available currencies and the countries that correspond to these currencies.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Currency.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AvailableCurrencyResponse</returns>
        ApiResponse<AvailableCurrencyResponse> CurrencyExchangeGetAvailableCurrenciesWithHttpInfo ();
        /// <summary>
        /// Gets the exchange rate from the source currency into the destination currency
        /// </summary>
        /// <remarks>
        /// Automatically gets the exchange rate from the source currency into the destination currency using the latest available currency exchange rate data.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Currency.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <param name="destination">Destination currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <returns>ExchangeRateResult</returns>
        ExchangeRateResult CurrencyExchangeGetExchangeRate (string source, string destination);

        /// <summary>
        /// Gets the exchange rate from the source currency into the destination currency
        /// </summary>
        /// <remarks>
        /// Automatically gets the exchange rate from the source currency into the destination currency using the latest available currency exchange rate data.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Currency.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <param name="destination">Destination currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <returns>ApiResponse of ExchangeRateResult</returns>
        ApiResponse<ExchangeRateResult> CurrencyExchangeGetExchangeRateWithHttpInfo (string source, string destination);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Converts a price from the source currency into the destination currency
        /// </summary>
        /// <remarks>
        /// Automatically converts the price in the source currency into the destination currency using the latest available currency exchange rate data.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Currency.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <param name="destination">Destination currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <param name="sourcePrice">Input price, such as 19.99 in source currency</param>
        /// <returns>Task of ConvertedCurrencyResult</returns>
        System.Threading.Tasks.Task<ConvertedCurrencyResult> CurrencyExchangeConvertCurrencyAsync (string source, string destination, double? sourcePrice);

        /// <summary>
        /// Converts a price from the source currency into the destination currency
        /// </summary>
        /// <remarks>
        /// Automatically converts the price in the source currency into the destination currency using the latest available currency exchange rate data.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Currency.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <param name="destination">Destination currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <param name="sourcePrice">Input price, such as 19.99 in source currency</param>
        /// <returns>Task of ApiResponse (ConvertedCurrencyResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConvertedCurrencyResult>> CurrencyExchangeConvertCurrencyAsyncWithHttpInfo (string source, string destination, double? sourcePrice);
        /// <summary>
        /// Get a list of available currencies and corresponding countries
        /// </summary>
        /// <remarks>
        /// Enumerates available currencies and the countries that correspond to these currencies.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Currency.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AvailableCurrencyResponse</returns>
        System.Threading.Tasks.Task<AvailableCurrencyResponse> CurrencyExchangeGetAvailableCurrenciesAsync ();

        /// <summary>
        /// Get a list of available currencies and corresponding countries
        /// </summary>
        /// <remarks>
        /// Enumerates available currencies and the countries that correspond to these currencies.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Currency.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AvailableCurrencyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AvailableCurrencyResponse>> CurrencyExchangeGetAvailableCurrenciesAsyncWithHttpInfo ();
        /// <summary>
        /// Gets the exchange rate from the source currency into the destination currency
        /// </summary>
        /// <remarks>
        /// Automatically gets the exchange rate from the source currency into the destination currency using the latest available currency exchange rate data.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Currency.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <param name="destination">Destination currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <returns>Task of ExchangeRateResult</returns>
        System.Threading.Tasks.Task<ExchangeRateResult> CurrencyExchangeGetExchangeRateAsync (string source, string destination);

        /// <summary>
        /// Gets the exchange rate from the source currency into the destination currency
        /// </summary>
        /// <remarks>
        /// Automatically gets the exchange rate from the source currency into the destination currency using the latest available currency exchange rate data.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Currency.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <param name="destination">Destination currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <returns>Task of ApiResponse (ExchangeRateResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExchangeRateResult>> CurrencyExchangeGetExchangeRateAsyncWithHttpInfo (string source, string destination);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CurrencyExchangeApi : ICurrencyExchangeApi
    {
        private Cloudmersive.APIClient.NET.Currency.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyExchangeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CurrencyExchangeApi(String basePath)
        {
            this.Configuration = new Cloudmersive.APIClient.NET.Currency.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Cloudmersive.APIClient.NET.Currency.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyExchangeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CurrencyExchangeApi(Cloudmersive.APIClient.NET.Currency.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Cloudmersive.APIClient.NET.Currency.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cloudmersive.APIClient.NET.Currency.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloudmersive.APIClient.NET.Currency.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloudmersive.APIClient.NET.Currency.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Converts a price from the source currency into the destination currency Automatically converts the price in the source currency into the destination currency using the latest available currency exchange rate data.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Currency.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <param name="destination">Destination currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <param name="sourcePrice">Input price, such as 19.99 in source currency</param>
        /// <returns>ConvertedCurrencyResult</returns>
        public ConvertedCurrencyResult CurrencyExchangeConvertCurrency (string source, string destination, double? sourcePrice)
        {
             ApiResponse<ConvertedCurrencyResult> localVarResponse = CurrencyExchangeConvertCurrencyWithHttpInfo(source, destination, sourcePrice);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Converts a price from the source currency into the destination currency Automatically converts the price in the source currency into the destination currency using the latest available currency exchange rate data.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Currency.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <param name="destination">Destination currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <param name="sourcePrice">Input price, such as 19.99 in source currency</param>
        /// <returns>ApiResponse of ConvertedCurrencyResult</returns>
        public ApiResponse< ConvertedCurrencyResult > CurrencyExchangeConvertCurrencyWithHttpInfo (string source, string destination, double? sourcePrice)
        {
            // verify the required parameter 'source' is set
            if (source == null)
                throw new ApiException(400, "Missing required parameter 'source' when calling CurrencyExchangeApi->CurrencyExchangeConvertCurrency");
            // verify the required parameter 'destination' is set
            if (destination == null)
                throw new ApiException(400, "Missing required parameter 'destination' when calling CurrencyExchangeApi->CurrencyExchangeConvertCurrency");
            // verify the required parameter 'sourcePrice' is set
            if (sourcePrice == null)
                throw new ApiException(400, "Missing required parameter 'sourcePrice' when calling CurrencyExchangeApi->CurrencyExchangeConvertCurrency");

            var localVarPath = "/currency/exchange-rates/convert/{source}/to/{destination}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (source != null) localVarPathParams.Add("source", this.Configuration.ApiClient.ParameterToString(source)); // path parameter
            if (destination != null) localVarPathParams.Add("destination", this.Configuration.ApiClient.ParameterToString(destination)); // path parameter
            if (sourcePrice != null && sourcePrice.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sourcePrice); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sourcePrice; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CurrencyExchangeConvertCurrency", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConvertedCurrencyResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConvertedCurrencyResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConvertedCurrencyResult)));
        }

        /// <summary>
        /// Converts a price from the source currency into the destination currency Automatically converts the price in the source currency into the destination currency using the latest available currency exchange rate data.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Currency.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <param name="destination">Destination currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <param name="sourcePrice">Input price, such as 19.99 in source currency</param>
        /// <returns>Task of ConvertedCurrencyResult</returns>
        public async System.Threading.Tasks.Task<ConvertedCurrencyResult> CurrencyExchangeConvertCurrencyAsync (string source, string destination, double? sourcePrice)
        {
             ApiResponse<ConvertedCurrencyResult> localVarResponse = await CurrencyExchangeConvertCurrencyAsyncWithHttpInfo(source, destination, sourcePrice);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Converts a price from the source currency into the destination currency Automatically converts the price in the source currency into the destination currency using the latest available currency exchange rate data.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Currency.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <param name="destination">Destination currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <param name="sourcePrice">Input price, such as 19.99 in source currency</param>
        /// <returns>Task of ApiResponse (ConvertedCurrencyResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConvertedCurrencyResult>> CurrencyExchangeConvertCurrencyAsyncWithHttpInfo (string source, string destination, double? sourcePrice)
        {
            // verify the required parameter 'source' is set
            if (source == null)
                throw new ApiException(400, "Missing required parameter 'source' when calling CurrencyExchangeApi->CurrencyExchangeConvertCurrency");
            // verify the required parameter 'destination' is set
            if (destination == null)
                throw new ApiException(400, "Missing required parameter 'destination' when calling CurrencyExchangeApi->CurrencyExchangeConvertCurrency");
            // verify the required parameter 'sourcePrice' is set
            if (sourcePrice == null)
                throw new ApiException(400, "Missing required parameter 'sourcePrice' when calling CurrencyExchangeApi->CurrencyExchangeConvertCurrency");

            var localVarPath = "/currency/exchange-rates/convert/{source}/to/{destination}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (source != null) localVarPathParams.Add("source", this.Configuration.ApiClient.ParameterToString(source)); // path parameter
            if (destination != null) localVarPathParams.Add("destination", this.Configuration.ApiClient.ParameterToString(destination)); // path parameter
            if (sourcePrice != null && sourcePrice.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sourcePrice); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sourcePrice; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CurrencyExchangeConvertCurrency", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ConvertedCurrencyResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ConvertedCurrencyResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ConvertedCurrencyResult)));
        }

        /// <summary>
        /// Get a list of available currencies and corresponding countries Enumerates available currencies and the countries that correspond to these currencies.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Currency.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AvailableCurrencyResponse</returns>
        public AvailableCurrencyResponse CurrencyExchangeGetAvailableCurrencies ()
        {
             ApiResponse<AvailableCurrencyResponse> localVarResponse = CurrencyExchangeGetAvailableCurrenciesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of available currencies and corresponding countries Enumerates available currencies and the countries that correspond to these currencies.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Currency.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AvailableCurrencyResponse</returns>
        public ApiResponse< AvailableCurrencyResponse > CurrencyExchangeGetAvailableCurrenciesWithHttpInfo ()
        {

            var localVarPath = "/currency/exchange-rates/list-available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CurrencyExchangeGetAvailableCurrencies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AvailableCurrencyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AvailableCurrencyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AvailableCurrencyResponse)));
        }

        /// <summary>
        /// Get a list of available currencies and corresponding countries Enumerates available currencies and the countries that correspond to these currencies.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Currency.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of AvailableCurrencyResponse</returns>
        public async System.Threading.Tasks.Task<AvailableCurrencyResponse> CurrencyExchangeGetAvailableCurrenciesAsync ()
        {
             ApiResponse<AvailableCurrencyResponse> localVarResponse = await CurrencyExchangeGetAvailableCurrenciesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of available currencies and corresponding countries Enumerates available currencies and the countries that correspond to these currencies.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Currency.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (AvailableCurrencyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AvailableCurrencyResponse>> CurrencyExchangeGetAvailableCurrenciesAsyncWithHttpInfo ()
        {

            var localVarPath = "/currency/exchange-rates/list-available";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CurrencyExchangeGetAvailableCurrencies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AvailableCurrencyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AvailableCurrencyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AvailableCurrencyResponse)));
        }

        /// <summary>
        /// Gets the exchange rate from the source currency into the destination currency Automatically gets the exchange rate from the source currency into the destination currency using the latest available currency exchange rate data.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Currency.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <param name="destination">Destination currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <returns>ExchangeRateResult</returns>
        public ExchangeRateResult CurrencyExchangeGetExchangeRate (string source, string destination)
        {
             ApiResponse<ExchangeRateResult> localVarResponse = CurrencyExchangeGetExchangeRateWithHttpInfo(source, destination);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the exchange rate from the source currency into the destination currency Automatically gets the exchange rate from the source currency into the destination currency using the latest available currency exchange rate data.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Currency.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <param name="destination">Destination currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <returns>ApiResponse of ExchangeRateResult</returns>
        public ApiResponse< ExchangeRateResult > CurrencyExchangeGetExchangeRateWithHttpInfo (string source, string destination)
        {
            // verify the required parameter 'source' is set
            if (source == null)
                throw new ApiException(400, "Missing required parameter 'source' when calling CurrencyExchangeApi->CurrencyExchangeGetExchangeRate");
            // verify the required parameter 'destination' is set
            if (destination == null)
                throw new ApiException(400, "Missing required parameter 'destination' when calling CurrencyExchangeApi->CurrencyExchangeGetExchangeRate");

            var localVarPath = "/currency/exchange-rates/get/{source}/to/{destination}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (source != null) localVarPathParams.Add("source", this.Configuration.ApiClient.ParameterToString(source)); // path parameter
            if (destination != null) localVarPathParams.Add("destination", this.Configuration.ApiClient.ParameterToString(destination)); // path parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CurrencyExchangeGetExchangeRate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExchangeRateResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExchangeRateResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExchangeRateResult)));
        }

        /// <summary>
        /// Gets the exchange rate from the source currency into the destination currency Automatically gets the exchange rate from the source currency into the destination currency using the latest available currency exchange rate data.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Currency.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <param name="destination">Destination currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <returns>Task of ExchangeRateResult</returns>
        public async System.Threading.Tasks.Task<ExchangeRateResult> CurrencyExchangeGetExchangeRateAsync (string source, string destination)
        {
             ApiResponse<ExchangeRateResult> localVarResponse = await CurrencyExchangeGetExchangeRateAsyncWithHttpInfo(source, destination);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the exchange rate from the source currency into the destination currency Automatically gets the exchange rate from the source currency into the destination currency using the latest available currency exchange rate data.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Currency.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="source">Source currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <param name="destination">Destination currency three-digit code (ISO 4217), e.g. USD, EUR, etc.</param>
        /// <returns>Task of ApiResponse (ExchangeRateResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExchangeRateResult>> CurrencyExchangeGetExchangeRateAsyncWithHttpInfo (string source, string destination)
        {
            // verify the required parameter 'source' is set
            if (source == null)
                throw new ApiException(400, "Missing required parameter 'source' when calling CurrencyExchangeApi->CurrencyExchangeGetExchangeRate");
            // verify the required parameter 'destination' is set
            if (destination == null)
                throw new ApiException(400, "Missing required parameter 'destination' when calling CurrencyExchangeApi->CurrencyExchangeGetExchangeRate");

            var localVarPath = "/currency/exchange-rates/get/{source}/to/{destination}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (source != null) localVarPathParams.Add("source", this.Configuration.ApiClient.ParameterToString(source)); // path parameter
            if (destination != null) localVarPathParams.Add("destination", this.Configuration.ApiClient.ParameterToString(destination)); // path parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CurrencyExchangeGetExchangeRate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExchangeRateResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExchangeRateResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExchangeRateResult)));
        }

    }
}
